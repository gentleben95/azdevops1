trigger:
- none

variables:
  - group: credentials 
  - group: aks_prod 
  - name: TAG
    value: $(Build.BuildId)

stages:
  - stage: Build
    jobs:
      - job: BuildDockerImage
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az acr login --name $(ACR_NAME)

          - task: Docker@2
            inputs:
              containerRegistry: $(ACR_SERVICE_CONNECTION)
              repository: $(IMAGE_NAME)
              command: 'buildAndPush'
              buildContext: '.'
              dockerfile: 'AdoWeatherService/Dockerfile'
              tags: |
                $(TAG)


  - stage: Deploy
    dependsOn: Build
    jobs:
      - deployment: DeployToAKS
        pool:
          vmImage: 'ubuntu-latest'
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: PowerShell@2
                  inputs:
                    targetType: 'inline'
                    script: |
                      pwd
                      ls
                      $deploymentFile = 'kubernetes\deployment.yaml'
                      (Get-Content $deploymentFile) -replace '__ACR_NAME__', '$(ACR_NAME)' `
                                                       -replace '__TAG__', '$(TAG)' | `
                      Set-Content $deploymentFile

                - task: AzureCLI@2
                  displayName: Apply Config to AKS
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    scriptType: 'bash'
                    scriptLocation: 'inlineScript'
                    inlineScript: |
                      az aks get-credentials --name $('aks-' + '$(appName)') --resource-group $(resourceGroupName) --overwrite-existing
                      kubectl apply -f kubernetes/namespace.yaml
                      kubectl config set-context --current --namespace=$(appName)-namespace
                      kubectl apply -f kubernetes/deployment.yaml -f kubernetes/service.yaml
